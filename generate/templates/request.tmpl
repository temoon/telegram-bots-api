package requests

import (
{{range $_, $import := .Imports -}}
	"{{$import}}"
{{end -}}
	"context"
	"github.com/temoon/telegram-bots-api"
)

type {{.Type}} struct {
{{range $_, $f := .Fields -}}
    {{$f.Name}} {{if or $f.IsInputFile (len $f.Variants)}}interface{}{{else}}{{$f.FieldType}}{{end}}
{{end -}}
}

func (r *{{.Type}}) Call(ctx context.Context, b *telegram.Bot) (response interface{}, err error) {
	response = new({{.ResponseType}})
	err = b.CallMethod(ctx, "{{.Method.Name}}", {{if len .Fields}}r{{else}}nil{{end}}, response)
	return
}

{{if .ResponseVariants -}}
func (r *{{.Type}}) CallWithResponse(ctx context.Context, b *telegram.Bot, response interface{}) (err error) {
	switch response.(type) {
	case {{range $index, $type := .ResponseVariants}}{{if $index}}, {{end}}{{$type}}{{end}}:
		err = b.CallMethod(ctx, "{{.Method.Name}}", {{if len .Fields}}r{{else}}nil{{end}}, response)
	default:
		err = errors.New("unexpected response type")
	}

	return
}
{{- end}}

func (r *{{.Type}}) IsMultipart() (multipart bool) {
	{{if len .Fields -}}
	return {{.IsMultipart}}
	{{else -}}
	return
	{{end -}}
}

func (r *{{.Type}}) GetValues() (values map[string]interface{}, err error) {
	{{if len .Fields -}}
	values = make(map[string]interface{})

	{{range $k, $f := .Fields -}}
		{{if len $f.Variants}}
			switch value := r.{{$f.Name}}.(type) {
			{{range $v := $f.Variants -}}
				{{if eq $v.Type "string" -}}
					case {{if not $f.IsRequired}}*{{end}}string:
					values["{{$k}}"] = {{if not $f.IsRequired}}*{{end}}value
				{{else if "int64" -}}
					case {{if not $f.IsRequired}}*{{end}}int64:
					values["{{$k}}"] = strconv.FormatInt({{if not $f.IsRequired}}*{{end}}value, 10)
				{{else if eq $v.Type "int32" -}}
					case {{if not $f.IsRequired}}*{{end}}int32:
					values["{{$k}}"] = strconv.FormatInt(int64({{if not $f.IsRequired}}*{{end}}value), 10)
				{{else if eq $v.Type "float64" -}}
					case {{if not $f.IsRequired}}*{{end}}float64:
					values["{{$k}}"] = strconv.FormatFloat({{if not $f.IsRequired}}*{{end}}value, 'f', -1, 64)
				{{else if eq $v.Type "bool" -}}
					case bool:
					if value {
						values["{{$k}}"] = "1"
					} else {
						values["{{$k}}"] = "0"
					}
				{{else if $v.IsInputFile -}}
					case io.Reader:
					values["{{$k}}"] = value
				{{else if or $v.IsObject $v.IsArray -}}
					case {{if not $f.IsRequired}}*{{end}}{{$v.Type}}:
					{{if not $v.IsRequired -}}
						if value != nil {
					{{end -}}
					var data []byte
					if data, err = json.Marshal(value); err != nil {
						return
					}

					values["{{$k}}"] = string(data)
					{{if not $v.IsRequired -}}
						}
					{{end -}}
				{{end -}}
			{{end -}}
			default:
				err = errors.New("invalid {{$k}} field type")
				return
			}
		{{else}}
			{{if not $f.IsRequired -}}
				if r.{{$f.Name}} != nil {
			{{end -}}
			{{if eq $f.Type "string" -}}
				values["{{$k}}"] = {{if not $f.IsRequired}}*{{end}}r.{{$f.Name}}
			{{else if eq $f.Type "int64" -}}
				values["{{$k}}"] = strconv.FormatInt({{if not $f.IsRequired}}*{{end}}r.{{$f.Name}}, 10)
			{{else if eq $f.Type "int32" -}}
				values["{{$k}}"] = strconv.FormatInt(int64({{if not $f.IsRequired}}*{{end}}r.{{$f.Name}}), 10)
			{{else if eq $f.Type "float64" -}}
				values["{{$k}}"] = strconv.FormatFloat({{if not $f.IsRequired}}*{{end}}r.{{$f.Name}}, 'f', -1, 64)
			{{else if eq $f.Type "bool" -}}
				if {{if not $f.IsRequired}}*{{end}}r.{{$f.Name}} {
					values["{{$k}}"] = "1"
				} else {
					values["{{$k}}"] = "0"
				}
			{{else if $f.IsInputFile}}
				values["{{$k}}"] = r.{{$f.Name}}
			{{else if or $f.IsObject $f.IsArray -}}
				var data{{$f.Name}} []byte
				if data{{$f.Name}}, err = json.Marshal(r.{{$f.Name}}); err != nil {
					return
				}

				values["{{$k}}"] = string(data{{$f.Name}})
			{{end -}}
			{{if not $f.IsRequired -}}
				}
			{{end -}}
		{{end -}}
	{{end -}}
    {{end}}

	return
}
